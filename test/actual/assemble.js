[ { begin: 11,
    type: 'declaration',
    name: 'path',
    value: 'require(\'path\')',
    string: 'path',
    original: 'var path = require(\'path\');' },
  { begin: 12,
    type: 'declaration',
    name: 'util',
    value: 'require(\'util\')',
    string: 'util',
    original: 'var util = require(\'util\');' },
  { begin: 13,
    type: 'declaration',
    name: 'chalk',
    value: 'require(\'chalk\')',
    string: 'chalk',
    original: 'var chalk = require(\'chalk\');' },
  { begin: 14,
    type: 'declaration',
    name: 'fs',
    value: 'require(\'vinyl-fs\')',
    string: 'fs',
    original: 'var fs = require(\'vinyl-fs\');' },
  { begin: 15,
    type: 'declaration',
    name: 'gutil',
    value: 'require(\'gulp-util\')',
    string: 'gutil',
    original: 'var gutil = require(\'gulp-util\');' },
  { begin: 16,
    type: 'declaration',
    name: 'es',
    value: 'require(\'event-stream\')',
    string: 'es',
    original: 'var es = require(\'event-stream\');' },
  { begin: 17,
    type: 'declaration',
    name: 'glob',
    value: 'require(\'globby\')',
    string: 'glob',
    original: 'var glob = require(\'globby\');' },
  { begin: 18,
    type: 'declaration',
    name: 'Cache',
    value: 'require(\'config-cache\')',
    string: 'Cache',
    original: 'var Cache = require(\'config-cache\');' },
  { begin: 19,
    type: 'declaration',
    name: 'Context',
    value: 'require(\'context-manager\')',
    string: 'Context',
    original: 'var Context = require(\'context-manager\');' },
  { begin: 20,
    type: 'declaration',
    name: 'Orchestrator',
    value: 'require(\'orchestrator\')',
    string: 'Orchestrator',
    original: 'var Orchestrator = require(\'orchestrator\');' },
  { begin: 21,
    type: 'declaration',
    name: 'arrayify',
    value: 'require(\'arrayify-compact\')',
    string: 'arrayify',
    original: 'var arrayify = require(\'arrayify-compact\');' },
  { begin: 22,
    type: 'declaration',
    name: 'delimsMap',
    value: 'require(\'delimiter-map\')',
    string: 'delimsMap',
    original: 'var delimsMap = require(\'delimiter-map\');' },
  { begin: 23,
    type: 'declaration',
    name: 'collections',
    value: 'require(\'assemble-collections\')',
    string: 'collections',
    original: 'var collections = require(\'assemble-collections\');' },
  { begin: 24,
    type: 'declaration',
    name: 'loader',
    value: 'require(\'template-loader\')',
    string: 'loader',
    original: 'var loader = require(\'template-loader\');' },
  { begin: 25,
    type: 'declaration',
    name: 'helpers',
    value: 'require(\'helper-loader\')',
    string: 'helpers',
    original: 'var helpers = require(\'helper-loader\');' },
  { begin: 26,
    type: 'declaration',
    name: 'debug',
    value: 'require(\'debug\')(\'assemble\')',
    string: 'debug',
    original: 'var debug = require(\'debug\')(\'assemble\');' },
  { begin: 27,
    type: 'declaration',
    name: 'hljs',
    value: 'require(\'highlight.js\')',
    string: 'hljs',
    original: 'var hljs = require(\'highlight.js\');' },
  { begin: 28,
    type: 'declaration',
    name: 'Router',
    value: 'require(\'en-route\')',
    string: 'Router',
    original: 'var Router = require(\'en-route\');' },
  { begin: 29,
    type: 'declaration',
    name: 'Layouts',
    value: 'require(\'layouts\')',
    string: 'Layouts',
    original: 'var Layouts = require(\'layouts\');' },
  { begin: 30,
    type: 'declaration',
    name: '_',
    value: 'require(\'lodash\')',
    string: '_',
    original: 'var _ = require(\'lodash\');' },
  { begin: 31,
    type: 'declaration',
    name: 'extend',
    value: '_.extend',
    string: 'extend',
    original: 'var extend = _.extend;' },
  { type: 'comment',
    comment: '\n * Just about all the deps below this line\n * will be externalized into modules.\n ',
    begin: 34,
    end: 37 },
  { begin: 40,
    type: 'declaration',
    name: 'Files',
    value: 'require(\'./view/file\')',
    string: 'Files',
    original: 'var Files = require(\'./view/file\');' },
  { begin: 41,
    type: 'declaration',
    name: 'View',
    value: 'require(\'./view/view\')',
    string: 'View',
    original: 'var View = require(\'./view/view\');' },
  { begin: 42,
    type: 'declaration',
    name: 'session',
    value: 'require(\'./session\')',
    string: 'session',
    original: 'var session = require(\'./session\');' },
  { begin: 45,
    type: 'declaration',
    name: 'defaultPlugins',
    value: 'require(\'./defaults\')',
    string: 'defaultPlugins',
    original: 'var defaultPlugins = require(\'./defaults\');' },
  { begin: 46,
    type: 'declaration',
    name: 'middleware',
    value: 'require(\'./middleware\')',
    string: 'middleware',
    original: 'var middleware = require(\'./middleware\');' },
  { begin: 47,
    type: 'declaration',
    name: 'noopParser',
    value: 'require(\'./parsers/noop\')',
    string: 'noopParser',
    original: 'var noopParser = require(\'./parsers/noop\');' },
  { begin: 48,
    type: 'declaration',
    name: 'matter',
    value: 'require(\'./parsers/front-matter\')',
    string: 'matter',
    original: 'var matter = require(\'./parsers/front-matter\');' },
  { begin: 49,
    type: 'declaration',
    name: 'markdown',
    value: 'require(\'./parsers/markdown\')',
    string: 'markdown',
    original: 'var markdown = require(\'./parsers/markdown\');' },
  { begin: 50,
    type: 'declaration',
    name: 'collection',
    value: 'require(\'./plugins/collection\')',
    string: 'collection',
    original: 'var collection = require(\'./plugins/collection\');' },
  { begin: 51,
    type: 'declaration',
    name: 'parsers',
    value: 'require(\'./plugins/parser\')',
    string: 'parsers',
    original: 'var parsers = require(\'./plugins/parser\');' },
  { begin: 52,
    type: 'declaration',
    name: 'buffer',
    value: 'require(\'./plugins/buffer\')',
    string: 'buffer',
    original: 'var buffer = require(\'./plugins/buffer\');' },
  { begin: 53,
    type: 'declaration',
    name: 'routes',
    value: 'require(\'./plugins/routes\')',
    string: 'routes',
    original: 'var routes = require(\'./plugins/routes\');' },
  { begin: 54,
    type: 'declaration',
    name: 'normalize',
    value: 'require(\'./utils/normalize-file\')',
    string: 'normalize',
    original: 'var normalize = require(\'./utils/normalize-file\');' },
  { begin: 55,
    type: 'declaration',
    name: 'utils',
    value: 'require(\'./utils\')',
    string: 'utils',
    original: 'var utils = require(\'./utils\');' },
  { type: 'comment',
    comment: '\n * Create an `assemble` task.\n *\n * ```js\n * var assemble = require(\'assemble\');\n *\n * assemble.task(\'site\', function() {\n *   assemble.src(\'templates/*.hbs\')\n *     .pipe(assemble.dest(\'_gh_pages\'));\n * });\n * ```\n *\n * Optionally initialize a new `Assemble` with the given `context`.\n *\n * ```js\n * var config = new Assemble({foo: \'bar\'});\n * ```\n *\n * @class `Assemble`\n * @param {Object} `context`\n * @constructor\n * @api public\n ',
    begin: 58,
    end: 80 },
  { begin: 82,
    type: 'function statement',
    name: 'Assemble',
    args: [ 'options' ],
    string: '()',
    original: 'function Assemble(options) {' },
  { type: 'comment',
    comment: '\n * Extend `Assemble`\n ',
    begin: 87,
    end: 89 },
  { type: 'comment',
    comment: '\n * Initialize Assemble.\n *\n *   - setup default configuration\n *   - setup default middleware\n *\n * @api private\n ',
    begin: 95,
    end: 102 },
  { begin: 104,
    type: 'prototype method',
    class: 'Assemble',
    name: 'init',
    args: [ 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.init = function(options) {' },
  { begin: 107,
    type: 'property',
    receiver: 'this',
    name: 'files',
    value: 'new Files()',
    string: 'this.files',
    original: 'this.files = new Files();' },
  { begin: 108,
    type: 'property',
    receiver: 'this',
    name: 'layoutEngines',
    value: '{}',
    string: 'this.layoutEngines',
    original: 'this.layoutEngines = {};' },
  { begin: 109,
    type: 'property',
    receiver: 'this',
    name: 'engines',
    value: '{}',
    string: 'this.engines',
    original: 'this.engines = {};' },
  { begin: 111,
    type: 'property',
    receiver: 'collections',
    name: 'cache',
    value: '[]',
    string: 'collections.cache',
    original: 'collections.cache = [];' },
  { type: 'comment',
    comment: '\n * Initialize default configuration.\n *\n * @api private\n ',
    begin: 122,
    end: 126 },
  { begin: 128,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultConfig',
    args: [ 'opts' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaultConfig = function (opts) {' },
  { type: 'comment',
    comment: '\n * Set defaults.\n *\n * @api private\n ',
    begin: 189,
    end: 193 },
  { begin: 195,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaults',
    args: [ 'key', 'value' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaults = function(key, value) {' },
  { type: 'comment',
    comment: '\n * Override default options with user-defined `opts`\n * during initialization.\n *\n * @api private\n ',
    begin: 200,
    end: 205 },
  { begin: 207,
    type: 'prototype method',
    class: 'Assemble',
    name: 'overrides',
    args: [ 'opts' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.overrides = function(opts) {' },
  { type: 'comment',
    comment: '\n * Private method to load default plugins.\n *\n * @api private\n ',
    begin: 214,
    end: 218 },
  { begin: 220,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultPlugins',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaultPlugins = function() {' },
  { type: 'comment',
    comment: '\n * Private method to register default templates.\n *\n * {%= docs("api-default-templates") %}\n *\n * @api private\n ',
    begin: 243,
    end: 249 },
  { begin: 251,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultTemplates',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaultTemplates = function() {' },
  { type: 'comment',
    comment: '\n * Private method to register default parsers.\n *\n * @api private\n ',
    begin: 258,
    end: 262 },
  { begin: 264,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultParsers',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaultParsers = function() {' },
  { type: 'comment',
    comment: '\n * Private method to register default view engines.\n *\n * @api private\n ',
    begin: 279,
    end: 283 },
  { begin: 285,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultEngines',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaultEngines = function () {' },
  { type: 'comment',
    comment: '\n * Private method to register default syntax highlighter.\n *\n * @api private\n ',
    begin: 298,
    end: 302 },
  { begin: 304,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultHighlighter',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaultHighlighter = function() {' },
  { type: 'comment',
    comment: '\n * Lazily initalize router, to allow options to\n * be passed in after init.\n *\n * @api private\n ',
    begin: 314,
    end: 319 },
  { begin: 321,
    type: 'prototype method',
    class: 'Assemble',
    name: 'lazyRouter',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.lazyRouter = function() {' },
  { begin: 323,
    type: 'property',
    receiver: 'this',
    name: '_router',
    value: 'new Router({',
    string: 'this._router',
    original: 'this._router = new Router({' },
  { type: 'comment',
    comment: '\n * Lazily add a `Layout` instance if it has not yet been added.\n * Also normalizes settings to pass to the `layouts` library.\n *\n * We can\'t instantiate `Layout` in the `defaultConfig` because\n * it reads settings which might not be set until after init.\n *\n * A new instance of `Layouts` is added to `this.layoutEngines`\n * for each engine that is instantiated.\n *\n * @api private\n ',
    begin: 331,
    end: 342 },
  { begin: 344,
    type: 'prototype method',
    class: 'Assemble',
    name: 'lazyLayouts',
    args: [ 'ext', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.lazyLayouts = function(ext, options) {' },
  { type: 'comment',
    comment: '\n * Private method to setup event listeners on Assemble.\n *\n * @api private\n ',
    begin: 352,
    end: 356 },
  { begin: 358,
    type: 'prototype method',
    class: 'Assemble',
    name: 'listen',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.listen = function() {' },
  { type: 'comment',
    comment: '\n * Intialize default contexts and context levels.\n *\n * @api private\n ',
    begin: 385,
    end: 389 },
  { begin: 391,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultContexts',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.defaultContexts = function() {' },
  { begin: 392,
    type: 'property',
    receiver: 'this',
    name: 'context',
    value: 'new Context()',
    string: 'this.context',
    original: 'this.context = new Context();' },
  { type: 'comment',
    comment: '\n * Set the current working directory for all paths.\n * Default is `process.cwd()`, this does not need to\n * be changed unless you require something different.\n *\n * ```js\n * assemble.cwd(\'bench\');\n * ```\n *\n * @param  {String|Array} `args` File path or paths.\n * @return {String}\n * @api public\n ',
    begin: 414,
    end: 426 },
  { begin: 428,
    type: 'prototype method',
    class: 'Assemble',
    name: 'cwd',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.cwd = function () {' },
  { type: 'comment',
    comment: '\n * Run the given middleware `fns` during the specified\n * stage or stages.\n *\n * ```js\n * assemble.middleware(\'src:*\', function() {\n *   // do stuff\n * });\n * ```\n *\n * @param  {String} `stage`\n * @param  {Array} `fns`\n * @return {Object} `Assemble` to enable chaining.\n ',
    begin: 439,
    end: 452 },
  { begin: 454,
    type: 'prototype method',
    class: 'Assemble',
    name: 'middleware',
    args: [ 'stage', 'fns' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.middleware = function (stage, fns) {' },
  { type: 'comment',
    comment: '\n * Define an assemble task.\n *\n * **Example**\n *\n * ```js\n * assemble.task(\'site\', function() {\n *   // do stuff\n * });\n * ```\n *\n * @type method\n * @param {String} `name`\n * @param {Function} `fn`\n * @api public\n ',
    begin: 467,
    end: 482 },
  { begin: 484,
    type: 'prototype property',
    class: 'Assemble',
    name: 'task',
    value: 'Assemble.prototype.add',
    string: 'Assemble.prototype.task',
    original: 'Assemble.prototype.task = Assemble.prototype.add;' },
  { type: 'comment',
    comment: '\n * Wrapper around Orchestrator.start to normalize task arguments.\n *\n * @api private\n ',
    begin: 487,
    end: 491 },
  { begin: 493,
    type: 'prototype method',
    class: 'Assemble',
    name: 'run',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.run = function () {' },
  { type: 'comment',
    comment: '\n * Wrapper around Orchestrator._runTask to enable `sessions`\n *\n * @param  {Object} `task` Task to run\n * @api private\n ',
    begin: 499,
    end: 504 },
  { begin: 506,
    type: 'prototype method',
    class: 'Assemble',
    name: '_runTask',
    args: [ 'task' ],
    string: '.prototype.()',
    original: 'Assemble.prototype._runTask = function(task) {' },
  { type: 'comment',
    comment: '\n * Normalize a configuration object to provide a consistent\n * API to `files` and `options` objects.\n ',
    begin: 515,
    end: 518 },
  { begin: 520,
    type: 'prototype method',
    class: 'Assemble',
    name: 'config',
    args: [ 'options', 'obj' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.config = function (options, obj) {' },
  { type: 'comment',
    comment: '\n * Normalizes a file object to be an assemble vinyl file with\n * the necessary properties to provide plugins in the pipeline\n * with a consistent API.\n *\n * This method will be externalized to [assemble-utils].\n *\n * @param  {Object} `file` The file object to normalize. The following properties are expect on the source file.\n *     @property {Object} `data`: Typically metadata from locals or parsed front matter.\n *     @property {String} `content`: The actual content of the file.\n * @param  {Object} `options` Options to pass to `normalize`\n * @return {Object} `file` A normalize file object.\n ',
    begin: 529,
    end: 541 },
  { begin: 543,
    type: 'prototype method',
    class: 'Assemble',
    name: 'normalizeFile',
    args: [ 'file', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.normalizeFile = function (file, options) {' },
  { type: 'comment',
    comment: '\n * Glob patterns or filepaths to source files.\n *\n * ```js\n * assemble.src([patterns], [options])\n * ```\n *\n * **Example**\n *\n * ```js\n * assemble.task(\'site\', function() {\n *   assemble.src(\'src/*.hbs\', {layout: \'default\'})\n *     assemble.dest(\'dist\')\n * });\n * ```\n *\n * @param {String} `filepath`\n * @api public\n ',
    begin: 548,
    end: 566 },
  { begin: 568,
    type: 'prototype method',
    class: 'Assemble',
    name: 'src',
    args: [ 'glob', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.src = function (glob, options) {' },
  { type: 'comment',
    comment: '\n * Specify a destination for processed files.\n *\n * ```js\n * assemble.dest([patterns], [opts])\n * ```\n *\n * **Example**\n *\n * ```js\n * assemble.task(\'sitemap\', function() {\n *   assemble.src(\'src/*.txt\')\n *     assemble.dest(\'dist\', {ext: \'.xml\'})\n * });\n * ```\n * @param {String|Array|Function} `patterns` Glob patterns, file paths, or renaming function.\n * @param {Object} `opts` Options to be passed to `dest` plugins.\n * @api public\n ',
    begin: 583,
    end: 601 },
  { begin: 603,
    type: 'prototype method',
    class: 'Assemble',
    name: 'dest',
    args: [ 'dest', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.dest = function (dest, options) {' },
  { type: 'comment',
    comment: '\n * Register a collection to be used in assemble.\n *\n * {%= docs("api-collection") %}\n * {%= crosslink("api-collections") %}\n *\n * Report any related issues to [assemble-collections].\n * [assemble-collections]: https://github.com/assemble/assemble-collections/issues\n *\n * @param {Object} `options` Options used to build the collection.\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 618,
    end: 630 },
  { begin: 632,
    type: 'prototype method',
    class: 'Assemble',
    name: 'collection',
    args: [ 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.collection = function (options) {' },
  { type: 'comment',
    comment: '\n * Register an array of collections to be used in assemble.\n *\n * {%= docs("api-collections") %}\n *\n * Report any related issues to [assemble-collections].\n * [assemble-collections]: https://github.com/assemble/assemble-collections/issues\n *\n * @param {Array|Object} `cols` Array of collections used to build the collection.\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 638,
    end: 649 },
  { begin: 651,
    type: 'prototype method',
    class: 'Assemble',
    name: 'collections',
    args: [ 'cols' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.collections = function(cols) {' },
  { type: 'comment',
    comment: '\n * Add a new template `type` to Assemble by passing the singular\n * and plural names to be used for `type`.\n *\n * {%= docs("api-templates") %}\n *\n * @param {String} `type` Name of the new type to add\n * @param {Object} `options`\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 664,
    end: 674 },
  { begin: 676,
    type: 'prototype method',
    class: 'Assemble',
    name: 'template',
    args: [ 'type', 'plural', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.template = function(type, plural, options) {' },
  { begin: 704,
    type: 'property',
    receiver: 'opts',
    name: 'encoding',
    value: 'this.cache.encoding',
    string: 'opts.encoding',
    original: 'opts.encoding = this.cache.encoding;' },
  { begin: 722,
    type: 'property',
    receiver: 'file',
    name: 'type',
    value: 'type',
    string: 'file.type',
    original: 'file.type = type;' },
  { type: 'comment',
    comment: '\n * Returns an object with all loaded helpers;\n *\n * {%= docs("api-helpers") %}\n *\n * @return {Object} all the resolved and loaded helpers\n * @api public\n ',
    begin: 748,
    end: 755 },
  { begin: 757,
    type: 'prototype method',
    class: 'Assemble',
    name: 'helper',
    args: [ 'patterns' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.helper = function (patterns) {' },
  { type: 'comment',
    comment: '\n * Returns an object with all loaded helpers;\n *\n * {%= docs("api-helpers") %}\n *\n * @return {Object} all the resolved and loaded helpers\n * @api public\n ',
    begin: 763,
    end: 770 },
  { begin: 772,
    type: 'prototype method',
    class: 'Assemble',
    name: 'helpers',
    args: [ 'patterns', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.helpers = function (patterns, options) {' },
  { type: 'comment',
    comment: '\n * Register a helper for the current template engine.\n *\n * **Example:**\n *\n * ```js\n * assemble.registerHelper(\'include\', function(filepath) {\n *   return fs.readFileSync(filepath, \'utf8\');\n * });\n * ```\n *\n * **Usage:**\n *\n * ```js\n * assemble.render(\'<%= include("foo.md") %>\');\n * ```\n *\n * @param  {String} `key`\n * @param  {Object} `value`\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 783,
    end: 804 },
  { begin: 806,
    type: 'prototype method',
    class: 'Assemble',
    name: 'registerHelper',
    args: [ 'key', 'value' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.registerHelper = function (key, value) {' },
  { type: 'comment',
    comment: '\n * Register an array or glob of template helpers.\n *\n * **Example:**\n *\n * ```js\n * assemble.registerHelpers(\'a.js\');\n * // or\n * assemble.registerHelpers([\'a.js\', \'b.js\']);\n * // or\n * assemble.registerHelpers(\'*.js\');\n * ```\n *\n * @param  {String} `key`\n * @param  {Object} `value`\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 813,
    end: 830 },
  { begin: 832,
    type: 'prototype method',
    class: 'Assemble',
    name: 'registerHelpers',
    args: [ 'patterns', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.registerHelpers = function (patterns, options) {' },
  { type: 'comment',
    comment: '\n * Register a parser `fn` or array of `fns` to be used on\n * each `.src` file. This is used to parse front matter, but\n * can be used for any kind of parsing.\n *\n * By default, Assemble will parse front matter using\n * [gray-matter][gray-matter]. For front-matter in particular\n * it is probably not necessary to register additional parsing\n * functions, since gray-matter can support almost any format,\n * but this is cusomizable if necessary or if a non-supported\n * format is required.\n *\n * **Example:**\n *\n * ```js\n * assemble.parser(\'textile\', function (file, enc, options) {\n *   var str = textile(String(file.contents));\n *   file.contents = new Buffer(str);\n * });\n * ```\n *\n * [gray-matter]: https://github.com/assemble/gray-matter\n *\n * @param {String} `file` The file object\n * @param {Object} `options` Options to pass to parser.\n * @param {Function|Array} `fn` The parsing function or array of functions.\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 838,
    end: 866 },
  { begin: 868,
    type: 'prototype method',
    class: 'Assemble',
    name: 'parser',
    args: [ 'ext', 'fn' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.parser = function (ext, fn) {' },
  { type: 'comment',
    comment: '\n * Register an array or glob of parsers for the given `ext`.\n *\n * **Example:**\n *\n * ```js\n * assemble.parsers(\'hbs\', \'a.js\');\n * // or\n * assemble.parsers(\'md\' [\'a.js\', \'b.js\']);\n * // or\n * assemble.parsers(\'md\', \'*.js\');\n * ```\n *\n * @param  {String} `ext` The extension to associate with the parsers.\n * @param  {String|Array} `patterns` File paths or glob patterns.\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 890,
    end: 907 },
  { begin: 909,
    type: 'prototype method',
    class: 'Assemble',
    name: 'parsers',
    args: [ 'ext', 'patterns', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.parsers = function (ext, patterns, options) {' },
  { type: 'comment',
    comment: '\n * Traverse the `parser` stack, passing the `file` object to each\n * parser and returning the accumlated result.\n *\n * @param  {Object} `options`\n * @api private\n ',
    begin: 929,
    end: 935 },
  { begin: 937,
    type: 'prototype method',
    class: 'Assemble',
    name: 'parse',
    args: [ 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.parse = function (options) {' },
  { type: 'comment',
    comment: '\n * Run a file through a parser stack.\n *\n * @param  {Object} `file`\n * @param  {Object} `opts`\n * @return {Object}\n ',
    begin: 942,
    end: 948 },
  { begin: 950,
    type: 'prototype method',
    class: 'Assemble',
    name: 'runParsers',
    args: [ 'stack', 'file', 'opts' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.runParsers = function (stack, file, opts) {' },
  { type: 'comment',
    comment: '\n * Register the given view engine callback `fn` as `ext`.\n *\n * {%= docs("api-engine") %}\n *\n * @param {String} `ext`\n * @param {Function|Object} `fn` or `options`\n * @param {Object} `options`\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 975,
    end: 985 },
  { begin: 987,
    type: 'prototype method',
    class: 'Assemble',
    name: 'engine',
    args: [ 'ext', 'fn', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.engine = function (ext, fn, options) {' },
  { begin: 991,
    type: 'property',
    receiver: 'engine',
    name: 'renderFile',
    value: 'fn',
    string: 'engine.renderFile',
    original: 'engine.renderFile = fn;' },
  { begin: 992,
    type: 'property',
    receiver: 'engine',
    name: 'render',
    value: 'fn.render',
    string: 'engine.render',
    original: 'engine.render = fn.render;' },
  { begin: 995,
    type: 'property',
    receiver: 'engine',
    name: 'renderFile',
    value: 'fn.renderFile || fn.__express',
    string: 'engine.renderFile',
    original: 'engine.renderFile = fn.renderFile || fn.__express;' },
  { begin: 998,
    type: 'property',
    receiver: 'engine',
    name: 'options',
    value: 'fn.options || options || {}',
    string: 'engine.options',
    original: 'engine.options = fn.options || options || {};' },
  { type: 'comment',
    comment: '\n * Register the given layout engine callback `fn` as `ext`.\n *\n * @param {String} `ext`\n * @param {Function|Object} `fn` or `options`\n * @param {Object} `options`\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 1022,
    end: 1030 },
  { begin: 1032,
    type: 'prototype method',
    class: 'Assemble',
    name: 'layoutEngine',
    args: [ 'ext', 'fn', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.layoutEngine = function(ext, fn, options) {' },
  { type: 'comment',
    comment: '\n * Private method for adding layouts settings to the `cache` for\n * the current template engine.\n *\n * @param {String} `ext` The extension to associate with the layout settings.\n * @param {String} `name`\n * @param {Object} `value`\n * @param {Object} `options`\n * @api private\n ',
    begin: 1062,
    end: 1071 },
  { begin: 1073,
    type: 'prototype method',
    class: 'Assemble',
    name: '_addLayout',
    args: [ 'ext', 'name', 'value', 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype._addLayout = function(ext, name, value, options) {' },
  { type: 'comment',
    comment: '\n * This is Assemble\'s internal render method, but it\'s exposed as a public method\n * so it can be replaced with a custom `render` method.\n *\n * @param  {Object} `data` Data to pass to registered view engines.\n * @param  {Object} `options` Options to pass to registered view engines.\n * @return {String}\n * @api public\n ',
    begin: 1088,
    end: 1096 },
  { begin: 1098,
    type: 'prototype method',
    class: 'Assemble',
    name: 'render',
    args: [ 'file', 'options', 'callback' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.render = function (file, options, callback) {' },
  { begin: 1125,
    type: 'property',
    receiver: 'opts',
    name: 'data',
    value: 'extend({}, opts.data, data)',
    string: 'opts.data',
    original: 'opts.data = extend({}, opts.data, data);' },
  { type: 'comment',
    comment: '\n * Set a router to be called.\n *\n * @param  {Object} `options`\n * @return {Object} `Assemble` to enable chaining.\n * @api private\n ',
    begin: 1136,
    end: 1142 },
  { begin: 1144,
    type: 'prototype method',
    class: 'Assemble',
    name: 'route',
    args: [],
    string: '.prototype.()',
    original: 'Assemble.prototype.route = function () {' },
  { type: 'comment',
    comment: '\n * **Example:**\n *\n * ```js\n * var routes = assemble.router();\n * routes.route(\':basename.hbs\', function (file, params, next) {\n *   // do something with the file\n *   next();\n * });\n *\n * assemble.src(\'\')\n *   .pipe(routes())\n *   .pipe(assemble.dest())\n * ```\n *\n * @param  {Object} `options`\n * @return {Function}\n ',
    begin: 1152,
    end: 1169 },
  { begin: 1171,
    type: 'prototype method',
    class: 'Assemble',
    name: 'router',
    args: [ 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.router = function(options) {' },
  { begin: 1182,
    type: 'function expression',
    name: 'rte',
    args: [],
    string: '()',
    original: 'var rte = function() {' },
  { begin: 1183,
    type: 'property',
    receiver: 'opts',
    name: 'router',
    value: 'router',
    string: 'opts.router',
    original: 'opts.router = router;' },
  { begin: 1188,
    type: 'method',
    receiver: 'rte',
    name: 'route',
    string: 'rte.route()',
    original: 'rte.route = function(route, fn) {' },
  { type: 'comment',
    comment: '\n * Proxy to `Router#param()` with one added api feature. The _name_ parameter\n * can be an array of names.\n *\n * @param {String|Array} `name`\n * @param {Function} `fn`\n * @return {Object} `Assemble` to enable chaining\n * @api public\n ',
    begin: 1197,
    end: 1205 },
  { begin: 1207,
    type: 'prototype method',
    class: 'Assemble',
    name: 'param',
    args: [ 'name', 'fn' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.param = function(name, fn){' },
  { type: 'comment',
    comment: '\n * This is Assemble\'s internal buffer method, but it\'s exposed as a public method\n * so it can be replaced with a custom `buffer` method.\n *\n * @param  {Object} `options` Options to pass to the buffer plugin.\n * @return {String}\n * @api public\n ',
    begin: 1224,
    end: 1231 },
  { begin: 1233,
    type: 'prototype method',
    class: 'Assemble',
    name: 'buffer',
    args: [ 'options' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.buffer = function (options) {' },
  { type: 'comment',
    comment: '\n * Register a function for syntax highlighting.\n *\n * By default, Assemble uses highlight.js for syntax highlighting.  It\'s not\n * necessary to register another function unless you want to override the default.\n *\n * **Examples:**\n *\n * ```js\n * assemble.highlight(function(code, lang) {\n *   if (lang) {\n *     return hljs.highlight(lang, code).value;\n *   }\n *   return hljs.highlightAuto(code).value;\n * });\n * ```\n *\n * @param {Function} `fn`\n * @return {Object} `Assemble` to enable chaining.\n * @api public\n ',
    begin: 1239,
    end: 1259 },
  { begin: 1261,
    type: 'prototype method',
    class: 'Assemble',
    name: 'highlight',
    args: [ 'code', 'lang' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.highlight = function (code, lang) {' },
  { begin: 1263,
    type: 'property',
    receiver: 'this',
    name: 'highlighter',
    value: 'code',
    string: 'this.highlighter',
    original: 'this.highlighter = code;' },
  { type: 'comment',
    comment: '\n * Rerun the specified task when a file changes.\n *\n * ```js\n * assemble.task(\'watch\', function() {\n *   assemble.watch(\'docs/*.md\', [\'docs\']);\n * });\n * ```\n *\n * **Params:**\n *\n * @param  {String|Array} `glob` Filepaths or glob patterns.\n * @param  {String} `options`\n * @param  {Function} `fn` Task(s) to watch.\n * @return {String}\n ',
    begin: 1274,
    end: 1289 },
  { begin: 1291,
    type: 'prototype method',
    class: 'Assemble',
    name: 'watch',
    args: [ 'glob', 'options', 'fn' ],
    string: '.prototype.()',
    original: 'Assemble.prototype.watch = function(glob, options, fn) {' },
  { type: 'comment',
    comment: '\n * Expose middleware.\n ',
    begin: 1307,
    end: 1309 },
  { type: 'comment',
    comment: '\n * Expose `Assemble`\n ',
    begin: 1316,
    end: 1318 },
  { begin: 1320,
    type: 'property',
    receiver: 'module',
    name: 'exports',
    value: 'Assemble',
    string: 'module.exports',
    original: 'module.exports = Assemble;' } ]