[ { begin: 10,
    type: 'declaration',
    name: '_',
    value: 'require(\'lodash\')',
    string: '_',
    original: 'var _ = require(\'lodash\');' },
  { begin: 11,
    type: 'declaration',
    name: 'util',
    value: 'require(\'util\')',
    string: 'util',
    original: 'var util = require(\'util\');' },
  { begin: 12,
    type: 'declaration',
    name: 'namespaceData',
    value: 'require(\'namespace-data\')',
    string: 'namespaceData',
    original: 'var namespaceData = require(\'namespace-data\');' },
  { begin: 13,
    type: 'declaration',
    name: 'getobject',
    value: 'require(\'getobject\')',
    string: 'getobject',
    original: 'var getobject = require(\'getobject\');' },
  { begin: 14,
    type: 'declaration',
    name: 'expander',
    value: 'require(\'expander\')',
    string: 'expander',
    original: 'var expander = require(\'expander\');' },
  { begin: 15,
    type: 'declaration',
    name: 'plasma',
    value: 'require(\'plasma\')',
    string: 'plasma',
    original: 'var plasma = require(\'plasma\');' },
  { begin: 16,
    type: 'declaration',
    name: 'expand',
    value: 'expander.process',
    string: 'expand',
    original: 'var expand = expander.process;' },
  { begin: 17,
    type: 'declaration',
    name: 'Events',
    value: 'require(\'./events\')',
    string: 'Events',
    original: 'var Events = require(\'./events\');' },
  { type: 'comment',
    comment: '\n * Initialize a new `Cache`\n *\n * ```js\n * var config = new Cache();\n * ```\n *\n * @class Cache\n * @param {Object} `obj` Optionally pass an object to initialize `this.cache`.\n * @constructor\n * @api public\n ',
    begin: 20,
    end: 31 },
  { begin: 33,
    type: 'declaration',
    name: 'Cache',
    value: 'module.exports = function(obj) {',
    string: 'Cache',
    original: 'var Cache = module.exports = function(obj) {' },
  { begin: 35,
    type: 'property',
    receiver: 'this',
    name: 'cache',
    value: 'obj || {}',
    string: 'this.cache',
    original: 'this.cache = obj || {};' },
  { type: 'comment',
    comment: '\n * ## .keys\n *\n * Return the keys on `this.cache`.\n *\n * ```js\n * config.keys();\n * ```\n *\n * @method keys\n * @return {Boolean}\n * @api public\n ',
    begin: 42,
    end: 54 },
  { begin: 56,
    type: 'prototype method',
    class: 'Cache',
    name: 'keys',
    args: [],
    string: '.prototype.()',
    original: 'Cache.prototype.keys = function() {' },
  { type: 'comment',
    comment: '\n * ## .hasOwn\n *\n * Return true if `key` is an own, enumerable property\n * of `this.cache` or the given `obj`.\n *\n * ```js\n * config.hasOwn([key]);\n * ```\n *\n * @method hasOwn\n * @param  {String} `key`\n * @param  {Object} `obj` Optionally pass an object to check.\n * @return {Boolean}\n * @api public\n ',
    begin: 61,
    end: 76 },
  { begin: 78,
    type: 'prototype method',
    class: 'Cache',
    name: 'hasOwn',
    args: [ 'key', 'obj' ],
    string: '.prototype.()',
    original: 'Cache.prototype.hasOwn = function(key, obj) {' },
  { type: 'comment',
    comment: '\n * ## .clone\n *\n * Clone the given `obj` or `cache`.\n *\n * ```js\n * config.clone();\n * ```\n *\n * @method clone\n * @param  {Object} `obj` Optionally pass an object to clone.\n * @return {Boolean}\n * @api public\n ',
    begin: 83,
    end: 96 },
  { begin: 98,
    type: 'prototype method',
    class: 'Cache',
    name: 'clone',
    args: [ 'obj' ],
    string: '.prototype.()',
    original: 'Cache.prototype.clone = function(obj) {' },
  { type: 'comment',
    comment: '\n * ## .each\n *\n * Call `fn` on each property in `this.cache`.\n *\n * ```js\n * config.each(fn, obj);\n * ```\n *\n * @method each\n * @param  {Function} `fn`\n * @param  {Object} `obj` Optionally pass an object to iterate over.\n * @return {Object} Resulting object.\n * @api public\n ',
    begin: 103,
    end: 117 },
  { begin: 119,
    type: 'prototype method',
    class: 'Cache',
    name: 'each',
    args: [ 'fn', 'obj' ],
    string: '.prototype.()',
    original: 'Cache.prototype.each = function(fn, obj) {' },
  { type: 'comment',
    comment: '\n * ## .visit\n *\n * Traverse each _own property_ of `this.cache` or the given object,\n * recursively calling `fn` on child objects.\n *\n * ```js\n * config.visit(obj, fn);\n * ```\n *\n * @method visit\n * @param {Object|Function} `obj` Optionally pass an object.\n * @param {Function} `fn`\n * @return {Object} Return the resulting object.\n * @api public\n ',
    begin: 130,
    end: 145 },
  { begin: 147,
    type: 'prototype method',
    class: 'Cache',
    name: 'visit',
    args: [ 'obj', 'fn' ],
    string: '.prototype.()',
    original: 'Cache.prototype.visit = function(obj, fn) {' },
  { type: 'comment',
    comment: '\n * ## .set\n *\n * Assign `value` to `key` or return the value of `key`.\n *\n * ```js\n * config.set(key, value);\n * ```\n *\n * If `expand` is defined as true, the value will be set using [expander].\n *\n * **Examples:**\n *\n * ```js\n * // as a key-value pair\n * config.set(\'a\', {b: \'c\'});\n *\n * // or as an object\n * config.set({a: {b: \'c\'}});\n *\n * // chaining is possible\n * config\n *   .set({a: {b: \'c\'}})\n *   .set(\'d\', \'e\');\n * ```\n *\n * Expand template strings with expander:\n *\n * ```js\n * config.set(\'a\', {b: \'${c}\', c: \'d\'}, true);\n * ```\n *\n * Visit the [expander] docs for more info.\n *\n *\n * [expander]: https://github.com/tkellen/expander\n * [getobject]: https://github.com/cowboy/node-getobject\n *\n * @method set\n * @param {String} `key`\n * @param {*} `value`\n * @param {Boolean} `expand` Resolve template strings with [expander]\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 168,
    end: 212 },
  { begin: 214,
    type: 'prototype method',
    class: 'Cache',
    name: 'set',
    args: [ 'key', 'value', 'expand' ],
    string: '.prototype.()',
    original: 'Cache.prototype.set = function(key, value, expand) {' },
  { type: 'comment',
    comment: '\n * ## .get\n *\n * Return the stored value of `key`. If the value\n * does **not** exist on the cache, you may pass\n * `true` as a second parameter to tell [getobject]\n * to initialize the value as an empty object.\n *\n * ```js\n * config.set(\'foo\', \'bar\');\n * config.get(\'foo\');\n * // => "bar"\n * ```\n *\n * @method get\n * @param {*} `key`\n * @param {Boolean} `create`\n * @return {*}\n * @api public\n ',
    begin: 233,
    end: 252 },
  { begin: 254,
    type: 'prototype method',
    class: 'Cache',
    name: 'get',
    args: [ 'key', 'create' ],
    string: '.prototype.()',
    original: 'Cache.prototype.get = function(key, create) {' },
  { type: 'comment',
    comment: '\n * ## .constant\n *\n * Set a constant on the cache.\n *\n * **Example**\n *\n * ```js\n * config.constant(\'site.title\', \'Foo\');\n * ```\n *\n * @method `constant`\n * @param {String} `key`\n * @param {*} `value`\n * @chainable\n * @api public\n ',
    begin: 262,
    end: 278 },
  { begin: 280,
    type: 'prototype method',
    class: 'Cache',
    name: 'constant',
    args: [ 'key', 'value', 'namespace' ],
    string: '.prototype.()',
    original: 'Cache.prototype.constant = function(key, value, namespace) {' },
  { type: 'comment',
    comment: '\n * ## .methods (key)\n *\n * Return methods on `this.cache` or the given `obj`.\n *\n * ```js\n * config.methods(\'foo\')\n * //=> [\'set\', \'get\', \'enable\', ...]\n * ```\n *\n * @method methods\n * @param {Object} `obj`\n * @return {Array}\n * @api public\n ',
    begin: 300,
    end: 314 },
  { begin: 316,
    type: 'prototype method',
    class: 'Cache',
    name: 'methods',
    args: [ 'obj' ],
    string: '.prototype.()',
    original: 'Cache.prototype.methods = function(obj) {' },
  { type: 'comment',
    comment: '\n * ## .enabled (key)\n *\n * Check if `key` is enabled (truthy).\n *\n * ```js\n * config.enabled(\'foo\')\n * // => false\n *\n * config.enable(\'foo\')\n * config.enabled(\'foo\')\n * // => true\n * ```\n *\n * @method enabled\n * @param {String} `key`\n * @return {Boolean}\n * @api public\n ',
    begin: 322,
    end: 340 },
  { begin: 342,
    type: 'prototype method',
    class: 'Cache',
    name: 'enabled',
    args: [ 'key' ],
    string: '.prototype.()',
    original: 'Cache.prototype.enabled = function(key) {' },
  { type: 'comment',
    comment: '\n * ## .disabled (key)\n *\n * Check if `key` is disabled.\n *\n * ```js\n * config.disabled(\'foo\')\n * // => true\n *\n * config.enable(\'foo\')\n * config.disabled(\'foo\')\n * // => false\n * ```\n *\n * @method disabled\n * @param {String} `key`\n * @return {Boolean}\n * @api public\n ',
    begin: 347,
    end: 365 },
  { begin: 367,
    type: 'prototype method',
    class: 'Cache',
    name: 'disabled',
    args: [ 'key' ],
    string: '.prototype.()',
    original: 'Cache.prototype.disabled = function(key) {' },
  { type: 'comment',
    comment: '\n * ## .enable (key)\n *\n * Enable `key`.\n *\n * **Example**\n *\n * ```js\n * config.enable(\'foo\');\n * ```\n *\n * @method enable\n * @param {String} `key`\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 372,
    end: 387 },
  { begin: 389,
    type: 'prototype method',
    class: 'Cache',
    name: 'enable',
    args: [ 'key' ],
    string: '.prototype.()',
    original: 'Cache.prototype.enable = function(key) {' },
  { type: 'comment',
    comment: '\n * ## .disable (key)\n *\n * Disable `key`.\n *\n * **Example**\n *\n * ```js\n * config.disable(\'foo\');\n * ```\n *\n * @method disable\n * @param {String} `key`\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 395,
    end: 410 },
  { begin: 412,
    type: 'prototype method',
    class: 'Cache',
    name: 'disable',
    args: [ 'key' ],
    string: '.prototype.()',
    original: 'Cache.prototype.disable = function(key) {' },
  { begin: 437,
    type: 'prototype method',
    class: 'Cache',
    name: 'exists',
    args: [ 'key' ],
    string: '.prototype.()',
    original: 'Cache.prototype.exists = function(key) {' },
  { type: 'comment',
    comment: '\n * ## .union\n *\n * Add values to an array on the `cache`. This method\n * is chainable.\n *\n * **Example**\n *\n * ```js\n * // config.cache[\'foo\'] => [\'a.hbs\', \'b.hbs\']\n * config\n *   .union(\'foo\', [\'b.hbs\', \'c.hbs\'], [\'d.hbs\']);\n *   .union(\'foo\', [\'e.hbs\', \'f.hbs\']);\n *\n * // config.cache[\'foo\'] => [\'a.hbs\', \'b.hbs\', \'c.hbs\', \'d.hbs\', \'e.hbs\', \'f.hbs\']\n * ```\n *\n * @chainable\n * @method union\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 442,
    end: 463 },
  { begin: 465,
    type: 'prototype method',
    class: 'Cache',
    name: 'union',
    args: [ 'key' ],
    string: '.prototype.()',
    original: 'Cache.prototype.union = function(key) {' },
  { type: 'comment',
    comment: '\n * ## .extend\n *\n * Extend the `cache` with the given object.\n * This method is chainable.\n *\n * **Example**\n *\n * ```js\n * config\n *   .extend({foo: \'bar\'}, {baz: \'quux\'});\n *   .extend({fez: \'bang\'});\n * ```\n *\n * Or define the property to extend:\n *\n * ```js\n * config\n *   // extend `cache.a`\n *   .extend(\'a\', {foo: \'bar\'}, {baz: \'quux\'})\n *   // extend `cache.b`\n *   .extend(\'b\', {fez: \'bang\'})\n *   // extend `cache.a.b.c`\n *   .extend(\'a.b.c\', {fez: \'bang\'});\n * ```\n *\n * @chainable\n * @method extend\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 478,
    end: 508 },
  { begin: 510,
    type: 'prototype method',
    class: 'Cache',
    name: 'extend',
    args: [],
    string: '.prototype.()',
    original: 'Cache.prototype.extend = function() {' },
  { type: 'comment',
    comment: '\n * ## .merge\n *\n * Extend the cache with the given object.\n * This method is chainable.\n *\n * **Example**\n *\n * ```js\n * config\n *   .merge({foo: \'bar\'}, {baz: \'quux\'});\n *   .merge({fez: \'bang\'});\n * ```\n *\n * @chainable\n * @method merge\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 525,
    end: 543 },
  { begin: 545,
    type: 'prototype method',
    class: 'Cache',
    name: 'merge',
    args: [],
    string: '.prototype.()',
    original: 'Cache.prototype.merge = function() {' },
  { type: 'comment',
    comment: '\n * # Data\n *\n * > Methods for reading data files, processing template strings and\n * extending the `cache.data` object.\n *\n * ## .process\n *\n * Use [expander] to recursively expand template strings into\n * their resolved values.\n *\n * **Example**\n *\n * ```js\n * config.process({a: \'<%= b %>\', b: \'c\'});\n * //=> {a: \'c\', b: \'c\'}\n * ```\n *\n * @method process\n * @param {*} `lookup` Any value to process, usually strings with a\n *                     cache template, like `<%= foo %>` or `${foo}`.\n * @param {*} `opts` Options to pass to Lo-Dash `_.template`.\n * @api public\n ',
    begin: 560,
    end: 583 },
  { begin: 585,
    type: 'prototype method',
    class: 'Cache',
    name: 'process',
    args: [ 'lookup', 'context' ],
    string: '.prototype.()',
    original: 'Cache.prototype.process = function(lookup, context) {' },
  { type: 'comment',
    comment: '\n * ## .flattenData\n *\n * If a `data` property is on the given `data` object\n * (e.g. `data.data`, like when files named `data.json`\n * or `data.yml` are used), the value of `data.data`\'s\n * is flattened to the root `data` object.\n *\n * @method flattenData\n * @param {Object} `data`\n * @return {Object} Returns the flattened object.\n * @api private\n ',
    begin: 599,
    end: 611 },
  { begin: 613,
    type: 'prototype method',
    class: 'Cache',
    name: 'flattenData',
    args: [ 'data', 'name' ],
    string: '.prototype.()',
    original: 'Cache.prototype.flattenData = function(data, name) {' },
  { type: 'comment',
    comment: '\n * ## .extendData\n *\n * Extend the `cache.data` object with the given data. This\n * method is chainable.\n *\n * **Example**\n *\n * ```js\n * config\n *   .extendData({foo: \'bar\'}, {baz: \'quux\'});\n *   .extendData({fez: \'bang\'});\n * ```\n *\n * @chainable\n * @method extendData\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 623,
    end: 641 },
  { begin: 643,
    type: 'prototype method',
    class: 'Cache',
    name: 'extendData',
    args: [],
    string: '.prototype.()',
    original: 'Cache.prototype.extendData = function() {' },
  { type: 'comment',
    comment: '\n * ## .plasma\n *\n * Extend the `data` object with the value returned by [plasma].\n *\n * **Example:**\n *\n * ```js\n * config\n *   .plasma({foo: \'bar\'}, {baz: \'quux\'});\n *   .plasma({fez: \'bang\'});\n * ```\n *\n * See the [plasma] documentation for all available options.\n *\n * @method plasma\n * @param {Object|String|Array} `data` File path(s), glob pattern, or object of data.\n * @param {Object} `options` Options to pass to plasma.\n * @api public\n ',
    begin: 657,
    end: 676 },
  { begin: 678,
    type: 'prototype method',
    class: 'Cache',
    name: 'plasma',
    args: [],
    string: '.prototype.()',
    original: 'Cache.prototype.plasma = function() {' },
  { type: 'comment',
    comment: '\n * ## .namespace\n *\n * Expects file path(s) or glob pattern(s) to any JSON or YAML files to\n * be merged onto the data object. Any data files read in by the\n * `.namespace()` method will extend the `data` object with an object\n * named after the basename of each file.\n *\n * **Example**\n *\n * ```js\n * config.namespace([\'alert.json\', \'nav*.json\']);\n * ```\n * The data from each file is namespaced using the name of the file:\n *\n * ```js\n * {\n *   alert: {},\n *   navbar: {}\n * }\n * ```\n *\n * See the [plasma] documentation for all available options.\n *\n * @method namespace\n * @param {String|Array} `patterns` Filepaths or glob patterns.\n * @return {null}\n * @api public\n ',
    begin: 684,
    end: 712 },
  { begin: 714,
    type: 'prototype method',
    class: 'Cache',
    name: 'namespace',
    args: [ 'namespace', 'data', 'context' ],
    string: '.prototype.()',
    original: 'Cache.prototype.namespace = function(namespace, data, context) {' },
  { type: 'comment',
    comment: '\n * ## .data\n *\n * Extend the `data` object with data from a JSON or YAML file,\n * or by passing an object directly. Glob patterns may be used for\n * file paths.\n *\n * ```js\n * config\n *   .data({a: \'b\'})\n *   .data({c: \'d\'});\n *\n * console.log(config.cache);\n * //=> {data: {a: \'b\', c: \'d\'}}\n * ```\n *\n * @method data\n * @param {Object} `data`\n * @param {Object} `options` Options to pass to [plasma].\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 721,
    end: 742 },
  { begin: 744,
    type: 'prototype method',
    class: 'Cache',
    name: 'data',
    args: [],
    string: '.prototype.()',
    original: 'Cache.prototype.data = function() {' },
  { type: 'comment',
    comment: '\n * # Clearing the cache\n *\n * > Methods for clearing the cache, removing or reseting specific\n * values on the cache.\n *\n *\n * ## .omit\n *\n * Omit properties and their from the `cache`.\n *\n * **Example:**\n *\n * ```js\n * config\n *   .omit(\'foo\');\n *   .omit(\'foo\', \'bar\');\n *   .omit([\'foo\']);\n *   .omit([\'foo\', \'bar\']);\n * ```\n *\n * @chainable\n * @method omit\n * @return {Cache} for chaining\n * @api public\n ',
    begin: 758,
    end: 783 },
  { begin: 785,
    type: 'prototype method',
    class: 'Cache',
    name: 'omit',
    args: [],
    string: '.prototype.()',
    original: 'Cache.prototype.omit = function() {' },
  { begin: 787,
    type: 'property',
    receiver: 'this',
    name: 'cache',
    value: '_.omit.apply(_, [this.cache].concat(args))',
    string: 'this.cache',
    original: 'this.cache = _.omit.apply(_, [this.cache].concat(args));' },
  { type: 'comment',
    comment: '\n * ## .clear\n *\n * Remove `key` from the cache, or if no value is\n * specified the entire config is reset.\n *\n * **Example:**\n *\n * ```js\n * config.clear();\n * ```\n *\n * @chainable\n * @method clear\n * @api public\n ',
    begin: 793,
    end: 808 },
  { begin: 810,
    type: 'prototype method',
    class: 'Cache',
    name: 'clear',
    args: [ 'key' ],
    string: '.prototype.()',
    original: 'Cache.prototype.clear = function(key) {' },
  { begin: 815,
    type: 'property',
    receiver: 'this',
    name: 'cache',
    value: '{}',
    string: 'this.cache',
    original: 'this.cache = {};' },
  { type: 'comment',
    comment: '\n * ## .typeOf\n *\n * Return a string indicating the type of the\n * given value.\n *\n * @method `typeOf`\n * @param {*} `value`\n * @api private\n ',
    begin: 821,
    end: 830 },
  { begin: 832,
    type: 'function statement',
    name: 'typeOf',
    args: [ 'value' ],
    string: '()',
    original: 'function typeOf(value) {' } ]