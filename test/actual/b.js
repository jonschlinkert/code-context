[ { begin: 11,
    type: 'declaration',
    name: 'path',
    value: 'require(\'path\')',
    string: 'path',
    original: 'var path = require(\'path\');' },
  { begin: 12,
    type: 'declaration',
    name: 'util',
    value: 'require(\'util\')',
    string: 'util',
    original: 'var util = require(\'util\');' },
  { begin: 13,
    type: 'declaration',
    name: 'chalk',
    value: 'require(\'chalk\')',
    string: 'chalk',
    original: 'var chalk = require(\'chalk\');' },
  { begin: 14,
    type: 'declaration',
    name: 'fs',
    value: 'require(\'vinyl-fs\')',
    string: 'fs',
    original: 'var fs = require(\'vinyl-fs\');' },
  { begin: 15,
    type: 'declaration',
    name: 'gutil',
    value: 'require(\'gulp-util\')',
    string: 'gutil',
    original: 'var gutil = require(\'gulp-util\');' },
  { begin: 16,
    type: 'declaration',
    name: 'es',
    value: 'require(\'event-stream\')',
    string: 'es',
    original: 'var es = require(\'event-stream\');' },
  { begin: 17,
    type: 'declaration',
    name: 'glob',
    value: 'require(\'globby\')',
    string: 'glob',
    original: 'var glob = require(\'globby\');' },
  { begin: 18,
    type: 'declaration',
    name: 'Cache',
    value: 'require(\'config-cache\')',
    string: 'Cache',
    original: 'var Cache = require(\'config-cache\');' },
  { begin: 19,
    type: 'declaration',
    name: 'Context',
    value: 'require(\'context-manager\')',
    string: 'Context',
    original: 'var Context = require(\'context-manager\');' },
  { begin: 20,
    type: 'declaration',
    name: 'Orchestrator',
    value: 'require(\'orchestrator\')',
    string: 'Orchestrator',
    original: 'var Orchestrator = require(\'orchestrator\');' },
  { begin: 21,
    type: 'declaration',
    name: 'arrayify',
    value: 'require(\'arrayify-compact\')',
    string: 'arrayify',
    original: 'var arrayify = require(\'arrayify-compact\');' },
  { begin: 22,
    type: 'declaration',
    name: 'delimsMap',
    value: 'require(\'delimiter-map\')',
    string: 'delimsMap',
    original: 'var delimsMap = require(\'delimiter-map\');' },
  { begin: 23,
    type: 'declaration',
    name: 'collections',
    value: 'require(\'assemble-collections\')',
    string: 'collections',
    original: 'var collections = require(\'assemble-collections\');' },
  { begin: 24,
    type: 'declaration',
    name: 'loader',
    value: 'require(\'template-loader\')',
    string: 'loader',
    original: 'var loader = require(\'template-loader\');' },
  { begin: 25,
    type: 'declaration',
    name: 'helpers',
    value: 'require(\'helper-loader\')',
    string: 'helpers',
    original: 'var helpers = require(\'helper-loader\');' },
  { begin: 26,
    type: 'declaration',
    name: 'debug',
    value: 'require(\'debug\')(\'assemble\')',
    string: 'debug',
    original: 'var debug = require(\'debug\')(\'assemble\');' },
  { begin: 27,
    type: 'declaration',
    name: 'hljs',
    value: 'require(\'highlight.js\')',
    string: 'hljs',
    original: 'var hljs = require(\'highlight.js\');' },
  { begin: 28,
    type: 'declaration',
    name: 'Router',
    value: 'require(\'en-route\')',
    string: 'Router',
    original: 'var Router = require(\'en-route\');' },
  { begin: 29,
    type: 'declaration',
    name: 'Layouts',
    value: 'require(\'layouts\')',
    string: 'Layouts',
    original: 'var Layouts = require(\'layouts\');' },
  { begin: 30,
    type: 'declaration',
    name: '_',
    value: 'require(\'lodash\')',
    string: '_',
    original: 'var _ = require(\'lodash\');' },
  { begin: 31,
    type: 'declaration',
    name: 'extend',
    value: '_.extend',
    string: 'extend',
    original: 'var extend = _.extend;' },
  { begin: 40,
    type: 'declaration',
    name: 'Files',
    value: 'require(\'./view/file\')',
    string: 'Files',
    original: 'var Files = require(\'./view/file\');' },
  { begin: 41,
    type: 'declaration',
    name: 'View',
    value: 'require(\'./view/view\')',
    string: 'View',
    original: 'var View = require(\'./view/view\');' },
  { begin: 42,
    type: 'declaration',
    name: 'session',
    value: 'require(\'./session\')',
    string: 'session',
    original: 'var session = require(\'./session\');' },
  { begin: 45,
    type: 'declaration',
    name: 'defaultPlugins',
    value: 'require(\'./defaults\')',
    string: 'defaultPlugins',
    original: 'var defaultPlugins = require(\'./defaults\');' },
  { begin: 46,
    type: 'declaration',
    name: 'middleware',
    value: 'require(\'./middleware\')',
    string: 'middleware',
    original: 'var middleware = require(\'./middleware\');' },
  { begin: 47,
    type: 'declaration',
    name: 'noopParser',
    value: 'require(\'./parsers/noop\')',
    string: 'noopParser',
    original: 'var noopParser = require(\'./parsers/noop\');' },
  { begin: 48,
    type: 'declaration',
    name: 'matter',
    value: 'require(\'./parsers/front-matter\')',
    string: 'matter',
    original: 'var matter = require(\'./parsers/front-matter\');' },
  { begin: 49,
    type: 'declaration',
    name: 'markdown',
    value: 'require(\'./parsers/markdown\')',
    string: 'markdown',
    original: 'var markdown = require(\'./parsers/markdown\');' },
  { begin: 50,
    type: 'declaration',
    name: 'collection',
    value: 'require(\'./plugins/collection\')',
    string: 'collection',
    original: 'var collection = require(\'./plugins/collection\');' },
  { begin: 51,
    type: 'declaration',
    name: 'parsers',
    value: 'require(\'./plugins/parser\')',
    string: 'parsers',
    original: 'var parsers = require(\'./plugins/parser\');' },
  { begin: 52,
    type: 'declaration',
    name: 'buffer',
    value: 'require(\'./plugins/buffer\')',
    string: 'buffer',
    original: 'var buffer = require(\'./plugins/buffer\');' },
  { begin: 53,
    type: 'declaration',
    name: 'routes',
    value: 'require(\'./plugins/routes\')',
    string: 'routes',
    original: 'var routes = require(\'./plugins/routes\');' },
  { begin: 54,
    type: 'declaration',
    name: 'normalize',
    value: 'require(\'./utils/normalize-file\')',
    string: 'normalize',
    original: 'var normalize = require(\'./utils/normalize-file\');' },
  { begin: 55,
    type: 'declaration',
    name: 'utils',
    value: 'require(\'./utils\')',
    string: 'utils',
    original: 'var utils = require(\'./utils\');' },
  { begin: 82,
    type: 'function statement',
    name: 'Assemble',
    params: [ 'options' ],
    string: 'Assemble()',
    original: 'function Assemble(options) {' },
  { begin: 104,
    type: 'prototype method',
    class: 'Assemble',
    name: 'init',
    params: [ 'options' ],
    string: 'Assemble.prototype.init()',
    original: 'Assemble.prototype.init = function(options) {' },
  { begin: 105,
    type: 'declaration',
    name: 'opts',
    value: 'extend(this.options, options)',
    string: 'opts',
    original: 'var opts = extend(this.options, options);' },
  { begin: 107,
    type: 'property',
    receiver: 'this',
    name: 'files',
    value: 'new Files()',
    string: 'this.files',
    original: 'this.files = new Files();' },
  { begin: 108,
    type: 'property',
    receiver: 'this',
    name: 'layoutEngines',
    value: '{}',
    string: 'this.layoutEngines',
    original: 'this.layoutEngines = {};' },
  { begin: 109,
    type: 'property',
    receiver: 'this',
    name: 'engines',
    value: '{}',
    string: 'this.engines',
    original: 'this.engines = {};' },
  { begin: 111,
    type: 'property',
    receiver: 'collections',
    name: 'cache',
    value: '[]',
    string: 'collections.cache',
    original: 'collections.cache = [];' },
  { begin: 128,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultConfig',
    params: [ 'opts' ],
    string: 'Assemble.prototype.defaultConfig()',
    original: 'Assemble.prototype.defaultConfig = function (opts) {' },
  { begin: 130,
    type: 'declaration',
    name: 'env',
    value: 'process.env.NODE_ENV || \'development\'',
    string: 'env',
    original: 'var env = process.env.NODE_ENV || \'development\';' },
  { begin: 195,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaults',
    params: [ 'key', 'value' ],
    string: 'Assemble.prototype.defaults()',
    original: 'Assemble.prototype.defaults = function(key, value) {' },
  { begin: 207,
    type: 'prototype method',
    class: 'Assemble',
    name: 'overrides',
    params: [ 'opts' ],
    string: 'Assemble.prototype.overrides()',
    original: 'Assemble.prototype.overrides = function(opts) {' },
  { begin: 220,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultPlugins',
    params: [],
    string: 'Assemble.prototype.defaultPlugins()',
    original: 'Assemble.prototype.defaultPlugins = function() {' },
  { begin: 251,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultTemplates',
    params: [],
    string: 'Assemble.prototype.defaultTemplates()',
    original: 'Assemble.prototype.defaultTemplates = function() {' },
  { begin: 264,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultParsers',
    params: [],
    string: 'Assemble.prototype.defaultParsers()',
    original: 'Assemble.prototype.defaultParsers = function() {' },
  { begin: 285,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultEngines',
    params: [],
    string: 'Assemble.prototype.defaultEngines()',
    original: 'Assemble.prototype.defaultEngines = function () {' },
  { begin: 304,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultHighlighter',
    params: [],
    string: 'Assemble.prototype.defaultHighlighter()',
    original: 'Assemble.prototype.defaultHighlighter = function() {' },
  { begin: 321,
    type: 'prototype method',
    class: 'Assemble',
    name: 'lazyRouter',
    params: [],
    string: 'Assemble.prototype.lazyRouter()',
    original: 'Assemble.prototype.lazyRouter = function() {' },
  { begin: 323,
    type: 'property',
    receiver: 'this',
    name: '_router',
    value: 'new Router({',
    string: 'this._router',
    original: 'this._router = new Router({' },
  { begin: 344,
    type: 'prototype method',
    class: 'Assemble',
    name: 'lazyLayouts',
    params: [ 'ext', 'options' ],
    string: 'Assemble.prototype.lazyLayouts()',
    original: 'Assemble.prototype.lazyLayouts = function(ext, options) {' },
  { begin: 346,
    type: 'declaration',
    name: 'opts',
    value: 'extend({}, this.options, options)',
    string: 'opts',
    original: 'var opts = extend({}, this.options, options);' },
  { begin: 358,
    type: 'prototype method',
    class: 'Assemble',
    name: 'listen',
    params: [],
    string: 'Assemble.prototype.listen()',
    original: 'Assemble.prototype.listen = function() {' },
  { begin: 391,
    type: 'prototype method',
    class: 'Assemble',
    name: 'defaultContexts',
    params: [],
    string: 'Assemble.prototype.defaultContexts()',
    original: 'Assemble.prototype.defaultContexts = function() {' },
  { begin: 392,
    type: 'property',
    receiver: 'this',
    name: 'context',
    value: 'new Context()',
    string: 'this.context',
    original: 'this.context = new Context();' },
  { begin: 428,
    type: 'prototype method',
    class: 'Assemble',
    name: 'cwd',
    params: [],
    string: 'Assemble.prototype.cwd()',
    original: 'Assemble.prototype.cwd = function () {' },
  { begin: 429,
    type: 'declaration',
    name: 'cwd',
    value: 'this.cache.cwd || process.cwd()',
    string: 'cwd',
    original: 'var cwd = this.cache.cwd || process.cwd();' },
  { begin: 430,
    type: 'declaration',
    name: 'args',
    value: '[].slice.call(arguments)',
    string: 'args',
    original: 'var args = [].slice.call(arguments);' },
  { begin: 434,
    type: 'declaration',
    name: 'paths',
    value: '[cwd].concat(args)',
    string: 'paths',
    original: 'var paths = [cwd].concat(args);' },
  { begin: 454,
    type: 'prototype method',
    class: 'Assemble',
    name: 'middleware',
    params: [ 'stage', 'fns' ],
    string: 'Assemble.prototype.middleware()',
    original: 'Assemble.prototype.middleware = function (stage, fns) {' },
  { begin: 456,
    type: 'declaration',
    name: 'current',
    value: 'this.fns[stage] || gutil.noop()',
    string: 'current',
    original: 'var current = this.fns[stage] || gutil.noop();' },
  { begin: 484,
    type: 'prototype property',
    class: 'Assemble',
    name: 'task',
    value: 'Assemble.prototype.add',
    string: 'Assemble.prototype.task',
    original: 'Assemble.prototype.task = Assemble.prototype.add;' },
  { begin: 493,
    type: 'prototype method',
    class: 'Assemble',
    name: 'run',
    params: [],
    string: 'Assemble.prototype.run()',
    original: 'Assemble.prototype.run = function () {' },
  { begin: 494,
    type: 'declaration',
    name: 'tasks',
    value: 'arguments.length ? arguments : [\'default\']',
    string: 'tasks',
    original: 'var tasks = arguments.length ? arguments : [\'default\'];' },
  { begin: 506,
    type: 'prototype method',
    class: 'Assemble',
    name: '_runTask',
    params: [ 'task' ],
    string: 'Assemble.prototype._runTask()',
    original: 'Assemble.prototype._runTask = function(task) {' },
  { begin: 507,
    type: 'declaration',
    name: 'assemble',
    value: 'this',
    string: 'assemble',
    original: 'var assemble = this;' },
  { begin: 520,
    type: 'prototype method',
    class: 'Assemble',
    name: 'config',
    params: [ 'options', 'obj' ],
    string: 'Assemble.prototype.config()',
    original: 'Assemble.prototype.config = function (options, obj) {' },
  { begin: 543,
    type: 'prototype method',
    class: 'Assemble',
    name: 'normalizeFile',
    params: [ 'file', 'options' ],
    string: 'Assemble.prototype.normalizeFile()',
    original: 'Assemble.prototype.normalizeFile = function (file, options) {' },
  { begin: 568,
    type: 'prototype method',
    class: 'Assemble',
    name: 'src',
    params: [ 'glob', 'options' ],
    string: 'Assemble.prototype.src()',
    original: 'Assemble.prototype.src = function (glob, options) {' },
  { begin: 603,
    type: 'prototype method',
    class: 'Assemble',
    name: 'dest',
    params: [ 'dest', 'options' ],
    string: 'Assemble.prototype.dest()',
    original: 'Assemble.prototype.dest = function (dest, options) {' },
  { begin: 604,
    type: 'declaration',
    name: 'opts',
    value: '_.extend({}, this.options, options)',
    string: 'opts',
    original: 'var opts = _.extend({}, this.options, options);' },
  { begin: 632,
    type: 'prototype method',
    class: 'Assemble',
    name: 'collection',
    params: [ 'options' ],
    string: 'Assemble.prototype.collection()',
    original: 'Assemble.prototype.collection = function (options) {' },
  { begin: 651,
    type: 'prototype method',
    class: 'Assemble',
    name: 'collections',
    params: [ 'cols' ],
    string: 'Assemble.prototype.collections()',
    original: 'Assemble.prototype.collections = function(cols) {' },
  { begin: 676,
    type: 'prototype method',
    class: 'Assemble',
    name: 'template',
    params: [ 'type', 'plural', 'options' ],
    string: 'Assemble.prototype.template()',
    original: 'Assemble.prototype.template = function(type, plural, options) {' },
  { begin: 677,
    type: 'declaration',
    name: 'opts',
    value: 'extend({}, options)',
    string: 'opts',
    original: 'var opts = extend({}, options);' },
  { begin: 683,
    type: 'declaration',
    name: 'isLayout',
    value: 'opts.isLayout || false',
    string: 'isLayout',
    original: 'var isLayout = opts.isLayout || false;' },
  { begin: 703,
    type: 'declaration',
    name: 'opts',
    value: 'extend({}, this.options, options)',
    string: 'opts',
    original: 'var opts = extend({}, this.options, options);' },
  { begin: 704,
    type: 'property',
    receiver: 'opts',
    name: 'encoding',
    value: 'this.cache.encoding',
    string: 'opts.encoding',
    original: 'opts.encoding = this.cache.encoding;' },
  { begin: 707,
    type: 'declaration',
    name: 'o',
    value: '{}',
    string: 'o',
    original: 'var o = {};' },
  { begin: 709,
    type: 'declaration',
    name: 'templates',
    value: 'loader.load(patterns, opts)',
    string: 'templates',
    original: 'var templates = loader.load(patterns, opts);' },
  { begin: 712,
    type: 'declaration',
    name: 'parsers',
    value: 'this.cache.parsers',
    string: 'parsers',
    original: 'var parsers = this.cache.parsers;' },
  { begin: 713,
    type: 'declaration',
    name: 'routes',
    value: 'this.route',
    string: 'routes',
    original: 'var routes = this.route;' },
  { begin: 715,
    type: 'declaration',
    name: 'cache',
    value: '{}',
    string: 'cache',
    original: 'var cache = {};' },
  { begin: 722,
    type: 'property',
    receiver: 'file',
    name: 'type',
    value: 'type',
    string: 'file.type',
    original: 'file.type = type;' },
  { begin: 725,
    type: 'declaration',
    name: 'results',
    value: 'this._router.dispatchSync(file)',
    string: 'results',
    original: 'var results = this._router.dispatchSync(file);' },
  { begin: 735,
    type: 'declaration',
    name: 'ext',
    value: 'file.ext || file.src.ext || file.data.ext',
    string: 'ext',
    original: 'var ext = file.ext || file.src.ext || file.data.ext;' },
  { begin: 757,
    type: 'prototype method',
    class: 'Assemble',
    name: 'helper',
    params: [ 'patterns' ],
    string: 'Assemble.prototype.helper()',
    original: 'Assemble.prototype.helper = function (patterns) {' },
  { begin: 772,
    type: 'prototype method',
    class: 'Assemble',
    name: 'helpers',
    params: [ 'patterns', 'options' ],
    string: 'Assemble.prototype.helpers()',
    original: 'Assemble.prototype.helpers = function (patterns, options) {' },
  { begin: 773,
    type: 'declaration',
    name: 'args',
    value: '[].slice.call(arguments)',
    string: 'args',
    original: 'var args = [].slice.call(arguments);' },
  { begin: 776,
    type: 'declaration',
    name: 'o',
    value: 'helpers.load.apply(helpers, args)',
    string: 'o',
    original: 'var o = helpers.load.apply(helpers, args);' },
  { begin: 806,
    type: 'prototype method',
    class: 'Assemble',
    name: 'registerHelper',
    params: [ 'key', 'value' ],
    string: 'Assemble.prototype.registerHelper()',
    original: 'Assemble.prototype.registerHelper = function (key, value) {' },
  { begin: 832,
    type: 'prototype method',
    class: 'Assemble',
    name: 'registerHelpers',
    params: [ 'patterns', 'options' ],
    string: 'Assemble.prototype.registerHelpers()',
    original: 'Assemble.prototype.registerHelpers = function (patterns, options) {' },
  { begin: 868,
    type: 'prototype method',
    class: 'Assemble',
    name: 'parser',
    params: [ 'ext', 'fn' ],
    string: 'Assemble.prototype.parser()',
    original: 'Assemble.prototype.parser = function (ext, fn) {' },
  { begin: 875,
    type: 'declaration',
    name: 'parsers',
    value: 'this.cache.parsers[ext] || []',
    string: 'parsers',
    original: 'var parsers = this.cache.parsers[ext] || [];' },
  { begin: 876,
    type: 'declaration',
    name: 'self',
    value: 'this',
    string: 'self',
    original: 'var self = this;' },
  { begin: 909,
    type: 'prototype method',
    class: 'Assemble',
    name: 'parsers',
    params: [ 'ext', 'patterns', 'options' ],
    string: 'Assemble.prototype.parsers()',
    original: 'Assemble.prototype.parsers = function (ext, patterns, options) {' },
  { begin: 912,
    type: 'declaration',
    name: 'opts',
    value: 'extend({}, options)',
    string: 'opts',
    original: 'var opts = extend({}, options);' },
  { begin: 915,
    type: 'declaration',
    name: 'arr',
    value: '[]',
    string: 'arr',
    original: 'var arr = [];' },
  { begin: 937,
    type: 'prototype method',
    class: 'Assemble',
    name: 'parse',
    params: [ 'options' ],
    string: 'Assemble.prototype.parse()',
    original: 'Assemble.prototype.parse = function (options) {' },
  { begin: 950,
    type: 'prototype method',
    class: 'Assemble',
    name: 'runParsers',
    params: [ 'stack', 'file', 'opts' ],
    string: 'Assemble.prototype.runParsers()',
    original: 'Assemble.prototype.runParsers = function (stack, file, opts) {' },
  { begin: 955,
    type: 'declaration',
    name: 'ext',
    value: 'file.ext || path.extname(file.path) || this.get(\'ext\')',
    string: 'ext',
    original: 'var ext = file.ext || path.extname(file.path) || this.get(\'ext\');' },
  { begin: 961,
    type: 'declaration',
    name: 'parsers',
    value: 'stack[ext]',
    string: 'parsers',
    original: 'var parsers = stack[ext];' },
  { begin: 987,
    type: 'prototype method',
    class: 'Assemble',
    name: 'engine',
    params: [ 'ext', 'fn', 'options' ],
    string: 'Assemble.prototype.engine()',
    original: 'Assemble.prototype.engine = function (ext, fn, options) {' },
  { begin: 988,
    type: 'declaration',
    name: 'engine',
    value: '{}',
    string: 'engine',
    original: 'var engine = {};' },
  { begin: 991,
    type: 'property',
    receiver: 'engine',
    name: 'renderFile',
    value: 'fn',
    string: 'engine.renderFile',
    original: 'engine.renderFile = fn;' },
  { begin: 992,
    type: 'property',
    receiver: 'engine',
    name: 'render',
    value: 'fn.render',
    string: 'engine.render',
    original: 'engine.render = fn.render;' },
  { begin: 995,
    type: 'property',
    receiver: 'engine',
    name: 'renderFile',
    value: 'fn.renderFile || fn.__express',
    string: 'engine.renderFile',
    original: 'engine.renderFile = fn.renderFile || fn.__express;' },
  { begin: 998,
    type: 'property',
    receiver: 'engine',
    name: 'options',
    value: 'fn.options || options || {}',
    string: 'engine.options',
    original: 'engine.options = fn.options || options || {};' },
  { begin: 1032,
    type: 'prototype method',
    class: 'Assemble',
    name: 'layoutEngine',
    params: [ 'ext', 'fn', 'options' ],
    string: 'Assemble.prototype.layoutEngine()',
    original: 'Assemble.prototype.layoutEngine = function(ext, fn, options) {' },
  { begin: 1040,
    type: 'declaration',
    name: 'opts',
    value: 'extend({}, options)',
    string: 'opts',
    original: 'var opts = extend({}, options);' },
  { begin: 1073,
    type: 'prototype method',
    class: 'Assemble',
    name: '_addLayout',
    params: [ 'ext', 'name', 'value', 'options' ],
    string: 'Assemble.prototype._addLayout()',
    original: 'Assemble.prototype._addLayout = function(ext, name, value, options) {' },
  { begin: 1075,
    type: 'declaration',
    name: 'encoding',
    value: 'this.cache.encoding',
    string: 'encoding',
    original: 'var encoding = this.cache.encoding;' },
  { begin: 1077,
    type: 'declaration',
    name: 'layouts',
    value: '{}',
    string: 'layouts',
    original: 'var layouts = {};' },
  { begin: 1098,
    type: 'prototype method',
    class: 'Assemble',
    name: 'render',
    params: [ 'file', 'options', 'callback' ],
    string: 'Assemble.prototype.render()',
    original: 'Assemble.prototype.render = function (file, options, callback) {' },
  { begin: 1105,
    type: 'declaration',
    name: 'opts',
    value: '{}, settings = {}, data = {}',
    string: 'opts',
    original: 'var opts = {}, settings = {}, data = {};' },
  { begin: 1125,
    type: 'property',
    receiver: 'opts',
    name: 'data',
    value: 'extend({}, opts.data, data)',
    string: 'opts.data',
    original: 'opts.data = extend({}, opts.data, data);' },
  { begin: 1127,
    type: 'declaration',
    name: 'view',
    value: 'new View(file, opts, settings)',
    string: 'view',
    original: 'var view = new View(file, opts, settings);' },
  { begin: 1144,
    type: 'prototype method',
    class: 'Assemble',
    name: 'route',
    params: [],
    string: 'Assemble.prototype.route()',
    original: 'Assemble.prototype.route = function () {' },
  { begin: 1171,
    type: 'prototype method',
    class: 'Assemble',
    name: 'router',
    params: [ 'options' ],
    string: 'Assemble.prototype.router()',
    original: 'Assemble.prototype.router = function(options) {' },
  { begin: 1172,
    type: 'declaration',
    name: 'self',
    value: 'this',
    string: 'self',
    original: 'var self = this;' },
  { begin: 1174,
    type: 'declaration',
    name: 'opts',
    value: '_.defaults({}, options, this.options, {',
    string: 'opts',
    original: 'var opts = _.defaults({}, options, this.options, {' },
  { begin: 1179,
    type: 'declaration',
    name: 'router',
    value: 'new Router(opts)',
    string: 'router',
    original: 'var router = new Router(opts);' },
  { begin: 1182,
    type: 'function expression',
    name: 'rte',
    params: [],
    string: 'rte()',
    original: 'var rte = function() {' },
  { begin: 1183,
    type: 'property',
    receiver: 'opts',
    name: 'router',
    value: 'router',
    string: 'opts.router',
    original: 'opts.router = router;' },
  { begin: 1188,
    type: 'method',
    receiver: 'rte',
    name: 'route',
    params: [ 'route', 'fn' ],
    string: 'rte.route()',
    original: 'rte.route = function(route, fn) {' },
  { begin: 1207,
    type: 'prototype method',
    class: 'Assemble',
    name: 'param',
    params: [ 'name', 'fn' ],
    string: 'Assemble.prototype.param()',
    original: 'Assemble.prototype.param = function(name, fn){' },
  { begin: 1208,
    type: 'declaration',
    name: 'self',
    value: 'this',
    string: 'self',
    original: 'var self = this;' },
  { begin: 1233,
    type: 'prototype method',
    class: 'Assemble',
    name: 'buffer',
    params: [ 'options' ],
    string: 'Assemble.prototype.buffer()',
    original: 'Assemble.prototype.buffer = function (options) {' },
  { begin: 1234,
    type: 'declaration',
    name: 'opts',
    value: 'extend({}, this.options, options)',
    string: 'opts',
    original: 'var opts = extend({}, this.options, options);' },
  { begin: 1261,
    type: 'prototype method',
    class: 'Assemble',
    name: 'highlight',
    params: [ 'code', 'lang' ],
    string: 'Assemble.prototype.highlight()',
    original: 'Assemble.prototype.highlight = function (code, lang) {' },
  { begin: 1263,
    type: 'property',
    receiver: 'this',
    name: 'highlighter',
    value: 'code',
    string: 'this.highlighter',
    original: 'this.highlighter = code;' },
  { begin: 1291,
    type: 'prototype method',
    class: 'Assemble',
    name: 'watch',
    params: [ 'glob', 'options', 'fn' ],
    string: 'Assemble.prototype.watch()',
    original: 'Assemble.prototype.watch = function(glob, options, fn) {' },
  { begin: 1320,
    type: 'property',
    receiver: 'module',
    name: 'exports',
    value: 'Assemble',
    string: 'module.exports',
    original: 'module.exports = Assemble;' } ]